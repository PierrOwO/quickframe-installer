#!/usr/bin/env php
<?php
// QuickFrame CLI - Windows version

function color($text, $colorCode) {
    return "\033[" . $colorCode . "m$text\033[0m";
}

function showSpinner($process, $message = '') {
    $spinner = ['⠋','⠙','⠸','⠴','⠦','⠇'];
    $i = 0;

    while (true) {
        $status = proc_get_status($process);
        if (!$status['running']) break;

        echo "\r$message " . $spinner[$i++ % count($spinner)] . ' ';
        usleep(100000);
    }

    echo "\r$message " . color("✓", "32") . "\n";
}

if ($argc < 3 || $argv[1] !== 'new') {
    echo "Usage:\n";
    echo "  quickframe new <project-name>\n";
    exit(1);
}

$projectName = $argv[2];
$drive = getenv('SystemDrive') ?: 'C:';
$baseDir = $drive . DIRECTORY_SEPARATOR . 'QuickFrame';

if (!is_dir($baseDir)) {
    mkdir($baseDir, 0755, true);
}

$targetPath = $baseDir . DIRECTORY_SEPARATOR . $projectName;

if (file_exists($targetPath)) {
    echo color("Error: Folder '$projectName' already exists in $baseDir.\n", "31");
    exit(1);
}

$templateRepo = 'https://github.com/PierrOwO/QuickFrame.git';
echo "Downloading data...\n";

$tmpDir = sys_get_temp_dir() . DIRECTORY_SEPARATOR . 'qf_' . uniqid();
$cmdClone = "git clone $templateRepo $tmpDir 2>&1";

$processClone = proc_open($cmdClone, [
    1 => ['pipe', 'w'],
    2 => ['pipe', 'w']
], $pipesClone);

if (is_resource($processClone)) {
    showSpinner($processClone, "Cloning repository...");
    fclose($pipesClone[1]);
    fclose($pipesClone[2]);
    $cloneCode = proc_close($processClone);
    if ($cloneCode !== 0) {
        echo color("Error: Failed to download data.\n", "31");
        exit(1);
    }
} else {
    echo color("Error: Could not start git clone process.\n", "31");
    exit(1);
}

echo "Data downloaded, copying to '" . color($projectName, "33") . "'... \n";

function copyFolder(string $src, string $dst): void {
    if (!is_dir($dst)) {
        mkdir($dst, 0755, true);
    }
    $files = scandir($src);
    foreach ($files as $file) {
        if ($file === '.' || $file === '..') continue;
        $srcPath = $src . DIRECTORY_SEPARATOR . $file;
        $dstPath = $dst . DIRECTORY_SEPARATOR . $file;
        if (is_dir($srcPath)) {
            copyFolder($srcPath, $dstPath);
        } else {
            copy($srcPath, $dstPath);
        }
    }
}

copyFolder($tmpDir, $targetPath);

$gitDir = $targetPath . DIRECTORY_SEPARATOR . '.git';
if (is_dir($gitDir)) {
    exec('rmdir /s /q ' . escapeshellarg($gitDir));
}

$gitignorePath = $targetPath . DIRECTORY_SEPARATOR . '.gitignore';
if (!file_exists($gitignorePath)) {
    file_put_contents($gitignorePath, "node_modules/\n");
}

// Inicjalizuj GIT
echo "Initializing GIT...\n";
chdir($targetPath);
exec('git init');

echo "Installing npm dependencies...\n";
$cmdNpm = 'npm install';
$descriptorspec = [
    1 => ['pipe', 'w'],
    2 => ['pipe', 'w']
];
$processNpm = proc_open($cmdNpm, $descriptorspec, $pipesNpm, $targetPath);

if (is_resource($processNpm)) {
    showSpinner($processNpm, "Running npm install...");
    $stdout = stream_get_contents($pipesNpm[1]);
    $stderr = stream_get_contents($pipesNpm[2]);
    fclose($pipesNpm[1]);
    fclose($pipesNpm[2]);
    $npmCode = proc_close($processNpm);

    if ($npmCode !== 0) {
        echo color("Warning: npm install failed.\n", "31");
        echo color($stderr, "31");
    } else {
        echo color("npm dependencies installed successfully.\n", "32");
    }
} else {
    echo color("Warning: Could not start npm install process.\n", "31");
}

if (is_dir($tmpDir)) {
    exec('rmdir /s /q ' . escapeshellarg($tmpDir));
}

$iterator = new RecursiveIteratorIterator(
    new RecursiveDirectoryIterator($targetPath, RecursiveDirectoryIterator::SKIP_DOTS)
);
foreach ($iterator as $file) {
    $filename = $file->getFilename();
    if ($filename === 'quickframe' || pathinfo($filename, PATHINFO_EXTENSION) === 'sh') {
        @chmod($file->getPathname(), 0755);
    }
}

echo "Setting up ENV...\n";
$envExample = $targetPath . DIRECTORY_SEPARATOR . '.env.example';
$env = $targetPath . DIRECTORY_SEPARATOR . '.env';
if (file_exists($envExample) && !file_exists($env)) {
    copy($envExample, $env);
}

echo "Project '" . color($projectName, "33") . "' has been created successfully in $baseDir.\n";
echo "Navigate to the directory: " . color("cd " . str_replace('/', '\\', $targetPath), "36") . "\n";