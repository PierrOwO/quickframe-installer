#!/usr/bin/env php
<?php
// QuickFrame CLI Installer (macOS/Linux)

function showSpinner($processId, $message = '') {
    $spinner = ['⠋','⠙','⠸','⠴','⠦','⠇'];
    $i = 0;
    while (posix_getpgid($processId)) {
        echo "\r$message " . $spinner[$i++ % count($spinner)];
        usleep(100000);
    }
    echo "\r$message \033[32m✓\033[0m\n";
}

if ($argc < 3 || $argv[1] !== 'new') {
    echo "Usage:\n";
    echo "  quickframe new <project-name>\n";
    exit(1);
}

$projectName = $argv[2];
$homeDir = getenv('HOME');
if (!$homeDir) {
    echo "Error: Could not get home directory.\n";
    exit(1);
}
$targetPath = $homeDir . DIRECTORY_SEPARATOR . $projectName;

if (file_exists($targetPath)) {
    echo "Error: Folder '\033[33m$projectName\033[0m' already exists.\n";
    exit(1);
}

$templateRepo = 'https://github.com/PierrOwO/QuickFrame.git';

echo "Downloading data...\n";

$tmpDir = sys_get_temp_dir() . DIRECTORY_SEPARATOR . 'qf_' . uniqid();
$cmd = "git clone $templateRepo $tmpDir 2>&1";
$process = proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['pipe', 'w']], $pipes);
$pid = proc_get_status($process)['pid'];
showSpinner($pid, "Cloning repository...");
$code = proc_close($process);
if ($code !== 0) {
    echo "Error: Failed to download data.\n";
    exit(1);
}

echo "Copying to '\033[33m$projectName\033[0m'...\n";

function copyFolder($src, $dst) {
    mkdir($dst, 0755, true);
    $files = scandir($src);
    foreach ($files as $file) {
        if ($file === '.' || $file === '..') continue;
        $srcPath = $src . DIRECTORY_SEPARATOR . $file;
        $dstPath = $dst . DIRECTORY_SEPARATOR . $file;
        if (is_dir($srcPath)) {
            copyFolder($srcPath, $dstPath);
        } else {
            copy($srcPath, $dstPath);
            chmod($dstPath, 0644);
        }
    }
}
copyFolder($tmpDir, $targetPath);

// Usuń .git
$gitDir = $targetPath . DIRECTORY_SEPARATOR . '.git';
if (is_dir($gitDir)) {
    exec('rm -rf ' . escapeshellarg($gitDir));
}

// Dodaj .gitignore jeśli go nie ma
$gitignorePath = $targetPath . DIRECTORY_SEPARATOR . '.gitignore';
if (!file_exists($gitignorePath)) {
    file_put_contents($gitignorePath, "node_modules/\n");
}

chdir($targetPath);

// Inicjalizacja git
echo "Initializing GIT... \n";
exec('git init');

// Sprawdzenie czy npm istnieje
$hasNpm = trim(shell_exec('command -v npm'));
if (!$hasNpm) {
    echo "⚠️  npm is not installed. Skipping 'npm install'.\n";
    echo "Please install Node.js and npm manually: https://nodejs.org/\n";
} else {
    $cmd = 'npm install 2>&1';
    $process = proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['pipe', 'w']], $pipes);
    $pid = proc_get_status($process)['pid'];
    showSpinner($pid, "Installing npm dependencies...");
    $npmCode = proc_close($process);
    if ($npmCode !== 0) {
        echo "Warning: npm install failed.\n";
    } else {
        echo "npm dependencies installed successfully.\n";
    }
}

exec('rm -rf ' . escapeshellarg($tmpDir));

$iterator = new RecursiveIteratorIterator(
    new RecursiveDirectoryIterator($targetPath, RecursiveDirectoryIterator::SKIP_DOTS)
);
foreach ($iterator as $file) {
    $filename = $file->getFilename();
    if ($filename === 'quickframe' || pathinfo($filename, PATHINFO_EXTENSION) === 'sh') {
        chmod($file->getPathname(), 0755);
    }
}

$envExample = $targetPath . DIRECTORY_SEPARATOR . '.env.example';
$env = $targetPath . DIRECTORY_SEPARATOR . '.env';
echo "Setting up ENV...\n";
if (file_exists($envExample) && !file_exists($env)) {
    copy($envExample, $env);
}

echo "Project '\033[33m$projectName\033[0m' has been created successfully.\n";
echo "Navigate to the directory: \033[36mcd $projectName\033[0m\n";